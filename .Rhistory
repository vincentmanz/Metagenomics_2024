pdf("yourfile.pdf")
g1
dev.off()
ggsave("yourfile2.pdf", g1)
```title: "R tutorial"
pdf("pictures/yourfile.pdf")
g1
dev.off()
ggsave("pictures/yourfile2.png", g1)
View(iris)
ds <- read.table(here::here("data",
"rforbeginers",
"../DATA/example_read.txt"),
header = TRUE,
sep = ";",
dec = ",")
ds <- read.table( "../DATA/example_read.txt"),
read.table("../DATA/example_read.txt"),
ds <- read.table("../DATA/example_read.txt"),
ds <- read.table("../DATA/example_read.txt"), header = TRUE, sep = ";", dec = ",")
ds <- read.table(file="../DATA/example_read.txt"), header = TRUE, sep = ";", dec = ",")
ds <- read.table(file="../DATA/example_read.txt", sep = "\t", header = TRUE)
ds <- read.table(file="DATA/example_read.txt", sep = "\t", header = TRUE)
ds <- read.table(file="../DATA/example_read.txt", sep = ";", header = TRUE)
ds <- read.table(file="../DATA/example_read.txt", sep = ";", header = TRUE)
merged_metagenomes <- import_biom("DATA/merge_species.biom")
# microbiome: Provides tools for microbiome data analysis and visualization
library(microbiome)
# microbiomeutilities: Extends functionalities of the microbiome package with additional utilities
library(microbiomeutilities)
# vegan: Functions for ecological analysis, including ordination methods, diversity analysis and other functions for community ecologists
library(vegan)
# compositions: Provides methods for analyzing compositional data, which is common in fields such as microbiome research
library(compositions)
# mia: Microbiome Analysis, provides functionalities for microbiome data analysis and visualization
library(mia)
# miaViz: Visualization utilities for microbiome analysis, part of the mia package ecosystem
library(miaViz)
# phyloseq: Microbiome Analysis, provides functionalities for microbiome data analysis and visualization
library(phyloseq)
merged_metagenomes <- phyloseq::import_biom("DATA/merge_species.biom")
merged_metagenomes <- phyloseq::import_biom("../DATA//merge_species.biom")
meta <- read.csv(file = "DATA/tryp_metadata.csv", sep = ",")
meta <- read.csv(file = "../DATA/tryp_metadata.csv", sep = ",")
setwd("~/Documents/project/Metagenomics_2024/Metagenomics_2024")
setwd("~/Documents/project/Metagenomics_2024/Metagenomics_2024")
setwd("~/Documents/project/Metagenomics_2024/Metagenomics_2024/Day_2/")
merged_metagenomes
# Summarize the phyloseq object 'merged_metagenomes'
summarize_phyloseq(merged_metagenomes)
# Summarize the phyloseq object 'merged_metagenomes'
microbiome::summarize_phyloseq(merged_metagenomes)
microbiome::summarize_phyloseq(merged_metagenomes)
merged_metagenomes
microbiome::summarize_phyloseq(merged_metagenomes)
# Display the first few rows of the OTU (Operational Taxonomic Unit) table
head(otu_table(merged_metagenomes))
# Display the first few rows of the taxonomy table
head(tax_table(merged_metagenomes))
# Display the first few rows of the sample data associated with 'merged_metagenomes'
head(sample_data(merged_metagenomes))
# Get the sample variables of the phyloseq object 'merged_metagenomes'
sample_variables(merged_metagenomes)
meta
merged_metagenomes <- phyloseq::import_biom("../DATA//merge_species.biom")
meta <- read.csv(file = "../DATA/tryp_metadata.csv", sep = ",")
merged_metagenomes <- phyloseq::import_biom("../DATA//merge_species.biom")
meta <- read.csv(file = "../DATA/tryp_metadata.csv", sep = ",")
merged_metagenomes
# Summarize the phyloseq object 'merged_metagenomes'
#microbiome::summarize_phyloseq(merged_metagenomes)
# Display the first few rows of the OTU (Operational Taxonomic Unit) table
head(otu_table(merged_metagenomes))
# Display the first few rows of the taxonomy table
head(tax_table(merged_metagenomes))
# Display the first few rows of the sample data associated with 'merged_metagenomes'
#head(sample_data(merged_metagenomes))
# Get the sample variables of the phyloseq object 'merged_metagenomes'
#sample_variables(merged_metagenomes)
# Sort the 'meta' data frame by the 'SRA.identifier' column
meta <- meta %>% arrange(row_number(SRA.identifier))
# Associate the sorted metadata to the phyloseq object as sample data
merged_metagenomes@sam_data <- sample_data(meta)
# Extract the sample names from the 'meta' data frame
column_name <- meta %>% pull(Sample)
# Associate the extracted sample names to the phyloseq object
sample_names(merged_metagenomes) <- column_name
# Remove the unnecessary 'k_' prefix in the taxonomy data
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4)
# Rename the columns of the taxonomy table to represent taxonomic ranks
colnames(merged_metagenomes@tax_table@.Data) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
head(psmelt(merged_metagenomes))
sample_names(merged_metagenomes)
# Aggregate rare taxa at the family level for the phyloseq object 'merged_metagenomes'
merged_metagenomes_family <- aggregate_rare(merged_metagenomes, level = "Family", detection = 0/100, prevalence = 0/100)
# Aggregate rare taxa at the family level for the phyloseq object 'merged_metagenomes'
merged_metagenomes_family <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0/100, prevalence = 0/100)
# Display the dimensionality of the abundances of 'merged_metagenomes_family'
dim(abundances(merged_metagenomes_family))
head(tax_table(merged_metagenomes_family))
plot_read_distribution(merged_metagenomes, "Type", plot.type = "density")
df <- psmelt(merged_metagenomes)  %>%  group_by(Sample, Time) %>%
summarise(sum_reads = sum(Abundance)) %>% arrange(sum_reads)
ggplot(df) +
geom_bar(aes(reorder(Sample, -sum_reads), sum_reads, fill=Time),
col="red", alpha = .2, stat="identity")
install.packages("fossil")
library(fossil)
a <- c(4,4,5)
b <- c(12,1,1,1)
chao2(a)
chao2(b)
pseq
# dplyr: A grammar of data manipulation, providing a consistent set of verbs to solve common data manipulation challenges
library(dplyr)
# tibble: Provides a modern reimagining of data frames, making them more user-friendly
library(tibble)
# tidyverse: A collection of R packages designed for data science, all sharing an underlying design philosophy, grammar, and data structures
library(tidyverse)
# microbiome: Provides tools for microbiome data analysis and visualization
library(microbiome)
# microbiomeutilities: Extends functionalities of the microbiome package with additional utilities
library(microbiomeutilities)
# vegan: Functions for ecological analysis, including ordination methods, diversity analysis and other functions for community ecologists
library(vegan)
# compositions: Provides methods for analyzing compositional data, which is common in fields such as microbiome research
library(compositions)
# mia: Microbiome Analysis, provides functionalities for microbiome data analysis and visualization
library(mia)
# miaViz: Visualization utilities for microbiome analysis, part of the mia package ecosystem
library(miaViz)
# phyloseq: Microbiome Analysis, provides functionalities for microbiome data analysis and visualization
library(phyloseq)
# ggplot2: A system for creating elegant and versatile data visualizations based on the grammar of graphics
library(ggplot2)
# hrbrthemes: Contains additional themes, theme components, and utilities for ggplot2
library(hrbrthemes)
# pheatmap: Pretty heatmaps, provides more control over the heatmap visualization
library(pheatmap)
# RColorBrewer: Provides color palettes for visualizing data, particularly useful in ggplot2 visualizations
library(RColorBrewer)
# ggrepel: Extends ggplot2 by adding better text label placement to avoid overlaps
library(ggrepel)
# patchwork: Makes it easier to combine multiple ggplot2 plots into one overall plot layout
library(patchwork)
setwd("~/Documents/project/Metagenomics_2024/Metagenomics_2024/Day_2/")
merged_metagenomes <- phyloseq::import_biom("../DATA//merge_species.biom")
meta <- read.csv(file = "../DATA/tryp_metadata.csv", sep = ",")
merged_metagenomes
# Summarize the phyloseq object 'merged_metagenomes'
#microbiome::summarize_phyloseq(merged_metagenomes)
# Display the first few rows of the OTU (Operational Taxonomic Unit) table
head(otu_table(merged_metagenomes))
# Display the first few rows of the taxonomy table
head(tax_table(merged_metagenomes))
# Display the first few rows of the sample data associated with 'merged_metagenomes'
#head(sample_data(merged_metagenomes))
# Get the sample variables of the phyloseq object 'merged_metagenomes'
#sample_variables(merged_metagenomes)
#check
head(psmelt(subset_taxa(merged_metagenomes, Genus == "Trypanosoma")))
merged_metagenomes
tax_table(merged_metagenomes)
# Sort the 'meta' data frame by the 'SRA.identifier' column
meta <- meta %>% arrange(row_number(SRA.identifier))
# Associate the sorted metadata to the phyloseq object as sample data
merged_metagenomes@sam_data <- sample_data(meta)
# Extract the sample names from the 'meta' data frame
column_name <- meta %>% pull(Sample)
# Associate the extracted sample names to the phyloseq object
sample_names(merged_metagenomes) <- column_name
# Remove the unnecessary 'k_' prefix in the taxonomy data
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4)
# Rename the columns of the taxonomy table to represent taxonomic ranks
colnames(merged_metagenomes@tax_table@.Data) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
head(psmelt(merged_metagenomes))
#check
head(psmelt(subset_taxa(merged_metagenomes, Genus == "Trypanosoma")))
head(psmelt(subset_taxa(merged_metagenomes, Genus == "Homo")))
#Keep only the kingdom of interest
merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom %in% c("Archaea", "Bacteria", "Fungi", "Viruses"))
# Aggregate rare taxa at the Genus level for the phyloseq object 'merged_metagenomes'
# Taxa are included if they have a detection threshold of 0.05% and a prevalence of 20%
pseq <- aggregate_rare(merged_metagenomes, level = "Phylum", detection = 0.05/100, prevalence = 20/100)
ggrare(pseq, step = 10, color = "Description", se = FALSE) +
geom_vline(xintercept = min(sample_sums(physeq)), color = "gray60")
remotes::install_github("gauravsk/ranacapa")
ranacapa::ggrare(pseq, step = 10, color = "Description", se = FALSE) +
geom_vline(xintercept = min(sample_sums(physeq)), color = "gray60")
ranacapa::ggrare(pseq, step = 10, color = "Description", se = FALSE) +
geom_vline(xintercept = min(sample_sums(pseq)), color = "gray60")
ranacapa::ggrare(pseq, step = 10, color = "Sample", se = FALSE) +
geom_vline(xintercept = min(sample_sums(pseq)), color = "gray60")
phyloseq::plot_richness(pseq, x = "Type",
measures = c("Observed", "Shannon", "Simpson"))
phyloseq::plot_richness(pseq, x = "Type", color = "Time"
measures = c("Observed", "Shannon", "Simpson"))
phyloseq::plot_richness(pseq, x = "Type", color = "Time",
measures = c("Observed", "Shannon", "Simpson"))
phyloseq::plot_richness(pseq, x = "Type", color = "Time",
measures = c("Observed", "Shannon", "Simpson")) + ggplot2::geom_boxplot()
phyloseq::plot_richness(pseq, x = "Type",
measures = c("Observed", "Shannon", "Simpson")) + ggplot2::geom_boxplot()
meta |>
dplyr::select(observed,
diversity_gini_simpson,
diversity_shannon,
evenness_pielou,
PD) |>
indices_normality(nrow = 3, ncol = 2)
metadata <- data.frame(sample_data(pseq))
meatdata
metadata
indices_normality <- function(rich, nrow, ncol) {
### p-value < 0.05 means data failed normality test
par(mfrow = c(nrow, ncol))
for (i in names(rich)) {
shap <- shapiro.test(rich[, i])
qqnorm(rich[, i], main = i, sub = shap$p.value)
qqline(rich[, i])
}
par(mfrow = c(1, 1))
}
rankabuncomp<-function (x, y = NULL, factor = NULL, return.data = T, specnames = c(1:3),
scale = "abundance", scaledx = F, type = "o", rainbow = T,
legendpos = "topright", xlim = c(1, max1), ylim = c(0, max2), ...)
{
groups <- table(y[, factor])
levels <- names(groups)
m <- length(groups)
max1 <- max(diversitycomp(x, y, factor1 = factor, index = "richness",
method = "pooled")[, 2])
if (scaledx == T) {
xlim <- c(0, 100)
}
max2 <- max.2 <- 0
for (i in 1:m) {
if (scale == "abundance") {
max.2 <- rankabundance(x, y, factor, levels[i])[1,
"abundance"]
}
if (scale == "logabun") {
max.2 <- rankabundance(x, y, factor, levels[i])[1,
"abundance"]
}
if (scale == "proportion") {
max.2 <- rankabundance(x, y, factor, levels[i])[1,
"proportion"]
}
if (max.2 > max2) {
max2 <- max.2
}
}
if (scale == "accumfreq") {
max2 <- 100
}
max2 <- as.numeric(max2)
if (rainbow == F) {
if (scale == "logabun" && all.equal(ylim, c(0, max2)) ==
T) {
ylim <- c(1, max2)
}
rankabunplot(rankabundance(x, y, factor, levels[1]),
scale = scale, scaledx = scaledx, type = type, labels = levels[1],
xlim = xlim, ylim = ylim, pch = 1, specnames = NULL,
...)
for (i in 2:m) {
rankabunplot(rankabundance(x, y, factor, levels[i]),
addit = T, scale = scale, scaledx = scaledx,
type = type, labels = levels[i], pch = i, specnames = NULL,
...)
}
legend(legendpos, legend = levels, pch = c(1:m))
}
else {
grDevices::palette(colorspace::rainbow_hcl(m, c = 90,
l = 50))
if (scale == "logabun" && all.equal(ylim, c(0, max2)) ==
T) {
ylim <- c(1, max2)
}
rankabunplot(rankabundance(x, y, factor, levels[1]),
scale = scale, scaledx = scaledx, type = type, labels = levels[1],
xlim = xlim, ylim = ylim, col = 1, pch = 1, specnames = NULL,
...)
for (i in 2:m) {
rankabunplot(rankabundance(x, y, factor, levels[i]),
addit = T, scale = scale, scaledx = scaledx,
type = type, labels = levels[i], col = i, pch = i,
specnames = NULL, ...)
}
legend(legendpos, legend = levels, pch = c(1:m),
col = c(1:m))
grDevices::palette("default")
}
if (return.data == T) {
for (i in 1:m) {
resulti <- data.frame(rankabundance(x, y, factor,
levels[i]))
resulti <- data.frame(Grouping = rep(levels[i], nrow(resulti)),
species = rownames(resulti), labelit = rep(FALSE,
nrow(resulti)), resulti)
spec.max <- min(max(specnames), nrow(resulti))
resulti[c(1:spec.max), "labelit"] <- as.logical(1)
rownames(resulti) <- NULL
if (i == 1) {
result <- resulti
}
else {
result <- rbind(result, resulti)
}
}
return(result)
}
}
metadata |>
dplyr::select(observed,
diversity_gini_simpson,
diversity_shannon,
evenness_pielou,
PD)
phyloseq::plot_richness(physeq_rar, x = "SampName",
measures = c("Observed", "Shannon", "Simpson","Chao1"))
phyloseq::plot_richness(pseq, x = "SampName",
measures = c("Observed", "Shannon", "Simpson","Chao1"))
phyloseq::plot_richness(pseq, x = "Sample",
measures = c("Observed", "Shannon", "Simpson","Chao1"))
phyloseq::plot_richness(pseq, x = "Type",
measures = c("Observed", "Shannon", "Simpson","Chao1"))
phyloseq::plot_richness(pseq, x = "Type",
measures = c("Observed", "Shannon", "Simpson","Chao1")) +  ggplot2::geom_boxplot()
phyloseq::plot_richness(pseq, x = "Type",color = "Type"
measures = c("Observed", "Shannon", "Simpson","Chao1")) +  ggplot2::geom_boxplot()
phyloseq::plot_richness(pseq, x = "Type", color = "Type",
measures = c("Observed", "Shannon", "Simpson","Chao1")) +  ggplot2::geom_boxplot()
metadata <- data.frame(sample_data(pseq))
metadata
tab <- richness(pseq, detection = 1000)
tab
tab <- richness(pseq)
tab
tab <- richness(pseq, index = c("Observed"))
tab <- richness(pseq, index = c("observed", "chao1"))
tab
microbiome::alpha(pseq)
metadata |>
dplyr::select(observed,
diversity_gini_simpson,
diversity_shannon,
chao1,
PD) |>
indices_normality(nrow = 3, ncol = 2)
tab <- microbiome::alpha(pseq)
tab |>
dplyr::select(observed,
diversity_gini_simpson,
diversity_shannon,
chao1) |>
indices_normality(nrow = 2, ncol = 2)
plot_anova_diversity(pseq, method = c("richness","shannon"), grouping_column = "Type")
remotes::install_github("umerijaz/microbiomeSeq")plot_anova_diversity(pseq, method = c("richness","shannon"), grouping_column = "Type")
remotes::install_github("umerijaz/microbiomeSeq")
install.packages('WGCNA')
install.packages('edgeR')
install.packages('matrixStats')
install.packages("matrixStats")
BiocManager::install("WGCNA")
remotes::install_github("umerijaz/microbiomeSeq")
BiocManager::install("DESeq2")
remotes::install_github("cran/KMDA")
remotes::install_github("umerijaz/microbiomeSeq")
plot_landscape(pseq, method = "NMDS", distance = "bray", col = "Time", size = 3)
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
head(abundances(pseq))
p <- plot_landscape(pseq, method = "NMDS", distance = "bray", col = "Time", size = 3)
p
remotes::install_github("umerijaz/microbiomeSeq")
install.packages("adespatial")
install.packages("units")
install.packages("sf")
install.packages("spdep")
install.packages("adespatial")
devtools::install_github("umerijaz/microbiomeSeq")
plot_anova_env(pseq, Type)
microbiomeSeq::plot_anova_env(pseq, Type)
microbiomeSeq::plot_anova_env(pseq, "Type")
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Type", select.variables=c("Time","Reads"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Type", select.variables=c("Time","Reads"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = Type, select.variables=c("Time","Reads"))
data(pitlatrine)
physeq<-pitlatrine
install.packages("microbiomeSeq.")
library(microbiomeSeq)
data(pitlatrine)
physeq<-pitlatrine
p1<-plot_anova_env(physeq,grouping_column =  "Country",select.variables=c("Temp","pH"))
print(p1)
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Type", select.variables=c("Time"))
plot_anova_env(pseq, grouping_column = "Type", select.variables=c("Time"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Type", select.variables=c("Time"))
pseq
head(sample_data(pseq))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Type", select.variables=c("Gut"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Gut", select.variables=c("itme"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Gut", select.variables=c("time"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Gut", select.variables=c("Time"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Gut", select.variables=c("Time","Type"))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Gut"
)
str(sample_data(pseq))
# Check for missing values
sum(is.na(sample_data(pseq)$Gut))
sum(is.na(sample_data(pseq)$Time))
sum(is.na(sample_data(pseq)$Type))
str(sample_data(pseq))
# Check for missing values
sum(is.na(psmelt(pseq)$Gut))
sum(is.na(psmelt(pseq)$Time))
sum(is.na(psmelt(pseq)$Type))
str(sample_data(pseq))
# Check for missing values
sum(is.na(psmelt(pseq)$Gut))
sum(is.na(psmelt(pseq)$Time))
length(is.na(psmelt(pseq)$Type))
(psmelt(pseq)$Type)
str(sample_data(pseq))
# Check for missing values
length(is.na(psmelt(pseq)$Gut))
length(is.na(psmelt(pseq)$Time))
length(is.na(psmelt(pseq)$Type))
microbiomeSeq::plot_anova_env(pseq, grouping_column = "Gut", select.variables = c("Time"))
stats::kruskal.test(tab$diversity_shannon ~ Type, data = metadata)
Time
tab$diversity_shannon
tab
metadata
stats::kruskal.test(tab$diversity_shannon ~ Type, data = metadata)
stats::kruskal.test(tab$diversity_shannon ~ Gut, data = metadata)
stats::kruskal.test(tab$diversity_shannon ~ Type, data = metadata)
stats::kruskal.test(tab$diversity_shannon ~ Time, data = metadata)
aov_observed <- stats::aov(Time ~ groupe, metadata)
aov_observed <- stats::aov(Time ~ Type, metadata)
aov_observed <- stats::aov(Gut ~ Type, metadata)
metadata
aov_observed <- stats::aov(tab$observed ~ Type, metadata)
signif_pairgroups <- stats::TukeyHSD(aov_observed, method = "bh")
signif_pairgroups
aov_observed <- stats::aov(tab$diversity_shannon ~ Type, metadata)
signif_pairgroups <- stats::TukeyHSD(aov_observed, method = "bh")
signif_pairgroups
aov_observed <- stats::aov(tab$diversity_shannon ~ Time, metadata)
signif_pairgroups <- stats::TukeyHSD(aov_observed, method = "bh")
signif_pairgroups
stat_summary(fun = mean, geom = "point",
#Boxplot as previously seen
graph_shan <- ggplot(metadata, aes(x = Geo, y = tab$diversity_gini_simpson)) +
geom_boxplot(alpha=0.6
#fill = c("#00AFBB", "#E7B800"),
#color = c("#00AFBB", "#E7B800")
) +
geom_jitter(aes(colour = Time),
position = position_jitter(0.02) ,
cex=2.2)+
stat_summary(fun = mean, geom = "point",
shape = 17, size = 3,
color = "white")
graph_shan
#Boxplot as previously seen
graph_shan <- ggplot(metadata, aes(x = Type, y = tab$diversity_gini_simpson)) +
geom_boxplot(alpha=0.6
#fill = c("#00AFBB", "#E7B800"),
#color = c("#00AFBB", "#E7B800")
) +
geom_jitter(aes(colour = Time),
position = position_jitter(0.02) ,
cex=2.2)+
stat_summary(fun = mean, geom = "point",
shape = 17, size = 3,
color = "white")
graph_shan
#Add p-value on graph
graph_shan + ggpubr::stat_pvalue_manual(
pairwise_test,
y.position = 3.5,
label = "p.adj = {p.adj}",
color = "blue",
linetype = 1,
tip.length = 0.01
)
pairwise_test <- ggpubr::compare_means(tab$diversity_shannon ~ Type,
metadata,
method = "wilcox.test")
pairwise_test <- ggpubr::compare_means(tab$diversity_shannon ~ Type,
metadata,
method = "wilcox.test")
tab$diversity_shannon
diversity_shannon <- tab$diversity_shannon
pairwise_test <- ggpubr::compare_means(diversity_shannon ~ Type,
metadata,
method = "wilcox.test")
diversity_shannon
aov_observed
#Add p-value on graph
graph_shan + ggpubr::stat_pvalue_manual(
aov_observed,
y.position = 3.5,
label = "p.adj = {p.adj}",
color = "blue",
linetype = 1,
tip.length = 0.01
)
