permanova <- adonis2(t(otu) ~ Gut,
+                     by = "margin",
meta
otu <- abundances(pseq)
meta <- meta(pseq)
permanova <- adonis(t(otu) ~ Gut,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
permanova
permanova <- adonis2(t(otu) ~ Gut,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
permanova
coef <- coefficients(permanova)["Time1",]
top.coef <- coef[rev(order(abs(as.numeric(coef))))[1:20]]
par(mar = c(3, 14, 2, 1))
barplot(sort(top.coef), horiz = T, las = 1, main = "Top taxa")
coef
otu <- abundances(pseq)
meta <- meta(pseq)
permanova <- adonis(t(otu) ~ Gut,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
print(as.data.frame(permanova$aov.tab))
otu <- abundances(pseq)
meta <- meta(pseq)
permanova <- adonis(t(otu) ~ Time,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
coef <- coefficients(permanova)["Time1",]
top.coef <- coef[rev(order(abs(as.numeric(coef))))[1:20]]
par(mar = c(3, 14, 2, 1))
barplot(sort(top.coef), horiz = T, las = 1, main = "Top taxa")
# Run NMDS on relabundance assay with Bray-Curtis distances
pseq <- aggregate_rare(AM_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
# Run NMDS on relabundance assay with Bray-Curtis distances
pseq <- aggregate_rare(AM_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
AM_metagenomes <- phyloseq::subset_samples(merged_metagenomes, Morning.Afternoon == "AM")
AM_metagenomes <- phyloseq::subset_samples(merged_metagenomes, Gut == "AM")
# Run NMDS on relabundance assay with Bray-Curtis distances
pseq <- aggregate_rare(AM_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
permanova <- adonis(t(otu) ~ Time,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
coef <- coefficients(permanova)["Time1",]
top.coef <- coef[rev(order(abs(as.numeric(coef))))[1:20]]
par(mar = c(3, 14, 2, 1))
barplot(sort(top.coef), horiz = T, las = 1, main = "Top taxa")
otu <- abundances(pseq)
meta <- meta(pseq)
permanova <- adonis(t(otu) ~ Time,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
coef <- coefficients(permanova)["Time1",]
top.coef <- coef[rev(order(abs(as.numeric(coef))))[1:20]]
par(mar = c(3, 14, 2, 1))
barplot(sort(top.coef), horiz = T, las = 1, main = "Top taxa")
AM_metagenomes <- phyloseq::subset_samples(merged_metagenomes, Gut == "PM")
# Run NMDS on relabundance assay with Bray-Curtis distances
pseq <- aggregate_rare(AM_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
otu <- abundances(pseq)
meta <- meta(pseq)
permanova <- adonis(t(otu) ~ Time,
by = "margin",
data = meta,
permutations = 9999,
method = "euclidean")
coef <- coefficients(permanova)["Time1",]
top.coef <- coef[rev(order(abs(as.numeric(coef))))[1:20]]
par(mar = c(3, 14, 2, 1))
barplot(sort(top.coef), horiz = T, las = 1, main = "Top taxa")
sppscores(dbrda) <- t(assay(tse, "relabundance"))
# Run NMDS on relabundance assay with Bray-Curtis distances
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
# abundances(pseq)
pseq  <- abundances(pseq) %>% as.data.frame()
pseq <- pseq <- pseq[order(rowSums(pseq), decreasing = TRUE), ] %>% t()
# Calculate distance matrix
species_frac_filtered_dist_bray <- vegdist(pseq, method = "bray")
# Perform NMDS on distance matrix
nmds_spec_comp_bray <- metaMDS(species_frac_filtered_dist_bray,distance = "bray",k = 2)
# Run NMDS on compositional assay with Euclidean distances
# Calculate distance matrix
species_frac_filtered_dist_euclidean <- vegdist(pseq, method = "euclidean")
# Perform NMDS on distance matrix
nmds_spec_comp_euclidean <- metaMDS(species_frac_filtered_dist_euclidean,distance = "euclidean",k = 2)
# Run NMDS on compositional assay with Aitchison distances
# Calculate distance matrix
species_frac_filtered_dist_aitchison <- vegdist(pseq, method = "robust.aitchison")
# Perform NMDS on distance matrix
nmds_spec_comp_aitchison <- metaMDS(species_frac_filtered_dist_aitchison,distance = "robust.aitchison",k = 2)
# Run NMDS on clr assay with Euclidean distances
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "clr")
pseq  <- abundances(pseq) %>% as.data.frame()
pseq <- pseq <- pseq[order(rowSums(pseq), decreasing = TRUE), ] %>% t()
# Calculate distance matrix
species_frac_filtered_dist_euclidean <- vegdist(pseq, method = "euclidean")
# Perform NMDS on distance matrix
nmds_spec_clr_euclidean <- metaMDS(species_frac_filtered_dist_euclidean,distance = "euclidean",k = 2)
# List of NMDS objects and their corresponding titles
nmds_list <- list(
list(data = nmds_spec_comp_bray, title = "Comp Bray"),
list(data = nmds_spec_comp_euclidean, title = "Comp Euclidean"),
list(data = nmds_spec_clr_aitchison, title = "Comp Aitchison"),
list(data = nmds_spec_clr_euclidean, title = "Clr Euclidean")
)
# Initialize an empty list to store plots
plot_list <- list()
# Loop through each NMDS object and generate the corresponding plot
for (nmds_item in nmds_list) {
nmds_spec_gg <- as.data.frame(nmds_item$data$points) %>%
rownames_to_column("Sample") %>%
dplyr::left_join(meta, by = "Sample")
plot <- ggplot(nmds_spec_gg, aes(x = MDS1, y = MDS2)) +
geom_point(aes(color = Time), size = 3, alpha = 0.5) +
geom_text_repel(aes(label = Type), size = 3, color = "black") +
ggtitle(paste("NMDS colored according to Time -", nmds_item$title)) +
theme_minimal()
# Add the plot to the plot list
plot_list[[nmds_item$title]] <- plot
}
# Combine all plots using patchwork
combined_plot <- wrap_plots(plot_list) +
plot_layout(guides = "collect")
# Print the combined plot
print(combined_plot)
merged_metagenomes
# To ensure reproducibility we can fix the seed here. This will ensure you always get the same result each time you run your data.
set.seed(34521)
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
# abundances(pseq)
pseq  <- abundances(pseq) %>% as.data.frame()
pseq <- pseq <- pseq[order(rowSums(pseq), decreasing = TRUE), ] %>% t()
# Calculate distance matrix
species_frac_filtered_dist <- vegdist(pseq, method = "bray")
# Perform NMDS on distance matrix
nmds_spec <- metaMDS(species_frac_filtered_dist, distance = "bray",k = 2)
nmds_spec
# Extract and reshape the data to plot ordination as ggplot  and add the metadata
# Convert the NMDS points to a data frame
nmds_spec_gg <- as.data.frame(nmds_spec$points)
# Add the "Sample" column based on row names
nmds_spec_gg <- nmds_spec_gg %>% rownames_to_column("Sample")
# Merge the NMDS data with the metadata by the "Sample" column
merged_data <- dplyr::left_join(meta, nmds_spec_gg, by = "Sample")
ggplot(merged_data, aes(x = MDS1, y = MDS2)) +
geom_point(aes(color = Time), size = 3, alpha = 0.5) +
geom_text_repel(aes(label = Type), size = 3, color = "black") +
ggtitle("NMDS colored according to Time") +
theme_minimal()
merged_metagenomes <- import_biom("/home/vincent/Documents/project/Metagenomics_2024/data/Trypanosoma_exposure/READBASED/merge_species.biom")
meta <- read.csv(file = "DATA/tryp_metadata.csv", sep = ",")
meta <- meta  %>%  arrange(row_number(SRA.identifier)) # sort the data frame
merged_metagenomes@sam_data <- sample_data(meta) # associate the metadata to the to the phyloseq object
column_name <-  meta %>% pull(Sample) # extract the sample names
sample_names(merged_metagenomes) <- column_name # associate the sample names to the phyloseq object
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4) # remove the unnecessary 'k_' in the taxonomy.
colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species") # change the rank name
merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom %in% c("Archaea", "Bacteria", "Fungi", "Viruses"))
set.seed(34521)
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
# abundances(pseq)
pseq  <- abundances(pseq) %>% as.data.frame()
pseq <- pseq <- pseq[order(rowSums(pseq), decreasing = TRUE), ] %>% t()
# Calculate distance matrix
species_frac_filtered_dist <- vegdist(pseq, method = "bray")
# Perform NMDS on distance matrix
nmds_spec <- metaMDS(species_frac_filtered_dist, distance = "bray",k = 2)
nmds_spec_gg <- as.data.frame(nmds_spec$points)
# Add the "Sample" column based on row names
nmds_spec_gg <- nmds_spec_gg %>% rownames_to_column("Sample")
# Merge the NMDS data with the metadata by the "Sample" column
merged_data <- dplyr::left_join(meta, nmds_spec_gg, by = "Sample")
ggplot(merged_data, aes(x = MDS1, y = MDS2)) +
geom_point(aes(color = Time), size = 3, alpha = 0.5) +
geom_text_repel(aes(label = Type), size = 3, color = "black") +
ggtitle("NMDS colored according to Time") +
theme_minimal()
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
# abundances(pseq)
pseq  <- abundances(pseq) %>% as.data.frame()
pseq <- pseq <- pseq[order(rowSums(pseq), decreasing = TRUE), ] %>% t()
# Calculate distance matrix
species_frac_filtered_dist_bray <- vegdist(pseq, method = "bray")
# Perform NMDS on distance matrix
nmds_spec_comp_bray <- metaMDS(species_frac_filtered_dist_bray,distance = "bray",k = 2)
# Run NMDS on compositional assay with Euclidean distances
# Calculate distance matrix
species_frac_filtered_dist_euclidean <- vegdist(pseq, method = "euclidean")
# Perform NMDS on distance matrix
nmds_spec_comp_euclidean <- metaMDS(species_frac_filtered_dist_euclidean,distance = "euclidean",k = 2)
# Run NMDS on compositional assay with Aitchison distances
# Calculate distance matrix
species_frac_filtered_dist_aitchison <- vegdist(pseq, method = "robust.aitchison")
# Perform NMDS on distance matrix
nmds_spec_comp_aitchison <- metaMDS(species_frac_filtered_dist_aitchison,distance = "robust.aitchison",k = 2)
# Run NMDS on clr assay with Euclidean distances
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "clr")
pseq  <- abundances(pseq) %>% as.data.frame()
pseq <- pseq <- pseq[order(rowSums(pseq), decreasing = TRUE), ] %>% t()
# Calculate distance matrix
species_frac_filtered_dist_euclidean <- vegdist(pseq, method = "euclidean")
# Perform NMDS on distance matrix
nmds_spec_clr_euclidean <- metaMDS(species_frac_filtered_dist_euclidean,distance = "euclidean",k = 2)
# List of NMDS objects and their corresponding titles
nmds_list <- list(
list(data = nmds_spec_comp_bray, title = "Comp Bray"),
list(data = nmds_spec_comp_euclidean, title = "Comp Euclidean"),
list(data = nmds_spec_clr_aitchison, title = "Comp Aitchison"),
list(data = nmds_spec_clr_euclidean, title = "Clr Euclidean")
)
# Initialize an empty list to store plots
plot_list <- list()
# Loop through each NMDS object and generate the corresponding plot
for (nmds_item in nmds_list) {
nmds_spec_gg <- as.data.frame(nmds_item$data$points) %>%
rownames_to_column("Sample") %>%
dplyr::left_join(meta, by = "Sample")
plot <- ggplot(nmds_spec_gg, aes(x = MDS1, y = MDS2)) +
geom_point(aes(color = Time), size = 3, alpha = 0.5) +
geom_text_repel(aes(label = Type), size = 3, color = "black") +
ggtitle(paste("NMDS colored according to Time -", nmds_item$title)) +
theme_minimal()
# Add the plot to the plot list
plot_list[[nmds_item$title]] <- plot
}
# Combine all plots using patchwork
combined_plot <- wrap_plots(plot_list) +
plot_layout(guides = "collect")
# Print the combined plot
print(combined_plot)
meat
meta
dbrda(pseq ~ Type + Time + Gut + Reads, pseq, distance = "bray")
head(psmelt(merged_metagenomes))
pseq_df <- (psmelt(merged_metagenomes))
dbrda(pseq_df ~ Type + Time + Gut + Reads, pseq_df, distance = "bray")
dbrda(pseq_df ~ Type + Time + Gut + Reads, pseq_df, distance = "bray")
data(varespec)
data(varechem)
varechem
varespec
merged_metagenomes
otu_table(pseq)
merged_metagenomes <- import_biom("/home/vincent/Documents/project/Metagenomics_2024/data/Trypanosoma_exposure/READBASED/merge_species.biom")
meta <- read.csv(file = "DATA/tryp_metadata.csv", sep = ",")
meta <- meta  %>%  arrange(row_number(SRA.identifier)) # sort the data frame
merged_metagenomes@sam_data <- sample_data(meta) # associate the metadata to the to the phyloseq object
column_name <-  meta %>% pull(Sample) # extract the sample names
sample_names(merged_metagenomes) <- column_name # associate the sample names to the phyloseq object
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4) # remove the unnecessary 'k_' in the taxonomy.
colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species") # change the rank name
merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom %in% c("Archaea", "Bacteria", "Fungi", "Viruses"))
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
otu_table(pseq)
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
otu <- otu_table(pseq)
otu
meta
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
head(otu)
head(meta)
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
# Ensure all factor columns in metadata are converted to factors
meta$Type <- as.factor(meta$Type)
meta$Time <- as.factor(meta$Time)
meta$Gut <- as.factor(meta$Gut)
meta
as.factor(meta$Type)
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
# Ensure all factor columns in metadata are converted to factors
meta$Type <- as.numeric(as.factor(meta$Type))
meta$Time <- as.numeric(as.factor(meta$Time))
meta$Gut <- as.numeric(as.factor(meta$Gut))
meta
head(otu)
head(meta)
head(t(otu))
otu <- otu_table(pseq) %>% t()
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
meta
otu <- as.matrix(otu)
otu <- apply(otu, 2, as.numeric)
head(t(otu))
head(meta)
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
otu <- otu_table(pseq) %>% t()
otu
otu <- as.matrix(otu)
otu
merged_metagenomes <- import_biom("/home/vincent/Documents/project/Metagenomics_2024/data/Trypanosoma_exposure/READBASED/merge_species.biom")
meta <- read.csv(file = "DATA/tryp_metadata.csv", sep = ",")
meta <- meta  %>%  arrange(row_number(SRA.identifier)) # sort the data frame
merged_metagenomes@sam_data <- sample_data(meta) # associate the metadata to the to the phyloseq object
column_name <-  meta %>% pull(Sample) # extract the sample names
sample_names(merged_metagenomes) <- column_name # associate the sample names to the phyloseq object
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4) # remove the unnecessary 'k_' in the taxonomy.
colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species") # change the rank name
merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom %in% c("Archaea", "Bacteria", "Fungi", "Viruses"))
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
otu <- otu_table(pseq) %>% t()
# Ensure all factor columns in metadata are converted to factors
meta$Type <- as.numeric(as.factor(meta$Type))
meta$Time <- as.numeric(as.factor(meta$Time))
meta$Gut <- as.numeric(as.factor(meta$Gut))
head(t(otu))
head(meta)
otu <- otu_table(pseq)
if (taxa_are_rows(otu)) {
otu <- t(otu)
}
mat <- as(otu, "matrix")
df <- as.data.frame(mat)
df
mat
dbrda(meta ~ Type + Time + Gut + Reads, otu, distance = "bray")
dbrda(meta ~ Type + Time + Gut + Reads, df, distance = "bray")
data(dietswap)
data(dietswap)
dietswap
x <- transform(dietswap, "compositional")
x <- microbiome::transform(dietswap, "compositional")
otu <- abundances(x)
metadata <- meta(x)
library(vegan)
rda.result <- vegan::rda(t(otu) ~ factor(metadata$nationality),
na.action = na.fail, scale = TRUE)
plot(rda.result, choices = c(1,2), type = "points", pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
points(rda.result, choices = c(1,2), pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
pl <- ordihull(rda.result, metadata$nationality, scaling = 3, label = TRUE)
otu
meta
vegan::brda(t(otu) ~ factor(meta$Type))
vegan::dbrda(t(otu) ~ factor(meta$Type))
meta$Type
t(otu)
otu <- otu_table(pseq) %>% t()
vegan::dbrda(t(otu) ~ factor(meta$Type))
merged_metagenomes <- import_biom("/home/vincent/Documents/project/Metagenomics_2024/data/Trypanosoma_exposure/READBASED/merge_species.biom")
meta <- read.csv(file = "DATA/tryp_metadata.csv", sep = ",")
meta <- meta  %>%  arrange(row_number(SRA.identifier)) # sort the data frame
merged_metagenomes@sam_data <- sample_data(meta) # associate the metadata to the to the phyloseq object
column_name <-  meta %>% pull(Sample) # extract the sample names
sample_names(merged_metagenomes) <- column_name # associate the sample names to the phyloseq object
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4) # remove the unnecessary 'k_' in the taxonomy.
colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species") # change the rank name
merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom %in% c("Archaea", "Bacteria", "Fungi", "Viruses"))
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
otu <- otu_table(pseq) %>% t()
# Ensure all factor columns in metadata are converted to factors
meta$Type <- as.numeric(as.factor(meta$Type))
meta$Time <- as.numeric(as.factor(meta$Time))
meta$Gut <- as.numeric(as.factor(meta$Gut))
head(t(otu))
head(meta)
vegan::dbrda(t(otu) ~ factor(meta$Type))
vegan::dbrda((otu) ~ factor(meta$Type))
vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) )
vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) + factor(meta$Gut) + factor(meta$Reads))
vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) + factor(meta$Gut) + factor(meta$Reads), data = otu)
vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) + factor(meta$Gut) + factor(meta$Reads), data = otu, distance = "bray")
dbrda <- vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) + factor(meta$Gut) + factor(meta$Reads), data = otu, distance = "bray")
dbrda
dbrda$terminfo
merged_metagenomes <- import_biom("/home/vincent/Documents/project/Metagenomics_2024/data/Trypanosoma_exposure/READBASED/merge_species.biom")
meta <- read.csv(file = "DATA/tryp_metadata.csv", sep = ",")
meta <- meta  %>%  arrange(row_number(SRA.identifier)) # sort the data frame
merged_metagenomes@sam_data <- sample_data(meta) # associate the metadata to the to the phyloseq object
column_name <-  meta %>% pull(Sample) # extract the sample names
sample_names(merged_metagenomes) <- column_name # associate the sample names to the phyloseq object
merged_metagenomes@tax_table@.Data <- substring(merged_metagenomes@tax_table@.Data, 4) # remove the unnecessary 'k_' in the taxonomy.
colnames(merged_metagenomes@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species") # change the rank name
merged_metagenomes <- subset_taxa(merged_metagenomes, Kingdom %in% c("Archaea", "Bacteria", "Fungi", "Viruses"))
pseq <- aggregate_rare(merged_metagenomes, level = "Genus", detection = 0.1/100, prevalence = 50/100)
pseq <- microbiome::transform(pseq, transform = "compositional")
otu <- otu_table(pseq) %>% t()
head(t(otu))
head(meta)
dbrda <- vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) + factor(meta$Gut) + factor(meta$Reads), data = otu, distance = "bray")
dbrda$terminfo
dbrda
dbrda(varespec ~ N + P + K + Condition(Al), varechem,
dist="jaccard")
dbrda_pseq <- vegan::dbrda(otu ~ factor(meta$Type) + factor(meta$Time) + factor(meta$Gut) + factor(meta$Reads), data = otu, distance = "bray")
View(dbrda)
permutest(dbrda_pseq)
plot(dbrda_pseq, choices = c(1,2), type = "points", pch = 15, scaling = 3, cex = 0.7, col = meta$Time)
points(dbrda_pseq, choices = c(1,2), pch = 15, scaling = 3, cex = 0.7, col = meta$Time)
pl <- ordihull(dbrda_pseq, meta$Time, scaling = 3, label = TRUE)
data("enterotype", package = "mia")
tse2 <- enterotype
# Apply relative transform
tse2 <- transformAssay(tse2,
method = "relabundance")
tse2
typeof(tse2)
typeof(enterotype)
nrows <- 200; ncols <- 6
counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows)
colData <- DataFrame(Treatment=rep(c("ChIP", "Input"), 3),
row.names=LETTERS[1:6])
se0 <- SummarizedExperiment(assays=SimpleList(counts=counts),
colData=colData)
se0
dim(se0)
dimnames(se0)
assayNames(se0)
head(assay(se0))
assays(se0) <- endoapply(assays(se0), asinh)
head(assay(se0))
se0
se0 <- SummarizedExperiment(assays=OTU,
colData=colData)
se0 <- SummarizedExperiment(assays=otu,
colData=colData)
se0 <- mia::SummarizedExperiment(assays=otu,
colData=colData)
BiocManager::install("SummarizedExperiment")
mia::makeTreeSummarizedExperimentFromPhyloseq(pseq)
pseq
mia::makeTreeSummarizedExperimentFromPhyloseq(pseq)
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(pseq)
# Apply relative transform
tse2 <- transformAssay(pseq,
method = "relabundance")
tse2
data("enterotype", package = "mia")
tse2 <- enterotype
# Apply relative transform
tse2 <- transformAssay(tse2,
method = "relabundance")
tse2
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(pseq)
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(merged_metagenomes)
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(merged_metagenomes)
# Apply relative transform
pseq <- mia::transformAssay(tse2,
method = "relabundance")
pseq <- mia::runRDA(pseq,
assay.type = "relabundance",
formula = assay ~ ClinicalStatus + Gender + Age,
distance = "bray",
na.action = na.exclude)
# Store results of PERMANOVA test
rda_info <- attr(reducedDim(pseq, "RDA"), "significance")
rda_info
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(merged_metagenomes)
# Apply relative transform
pseq <- mia::transformAssay(tse2,
method = "relabundance")
pseq <- mia::runRDA(pseq,
assay.type = "relabundance",
formula = assay ~ ClinicalStatus + Gender + Age,
distance = "bray",
na.action = na.exclude)
# Store results of PERMANOVA test
rda_info <- attr(reducedDim(pseq, "RDA"), "significance")
rda_info
tse2
pseq
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(merged_metagenomes)
pseq <-  mia::makeTreeSummarizedExperimentFromPhyloseq(merged_metagenomes)
# Apply relative transform
pseq <- mia::transformAssay(pseq,
method = "relabundance")
pseq
tse2
pseq$118060
pseq
pseq <- mia::runRDA(pseq,
assay.type = "relabundance",
formula = assay ~ Gut + Time + Type + Reads,
distance = "bray",
na.action = na.exclude)
# Store results of PERMANOVA test
rda_info <- attr(reducedDim(pseq, "RDA"), "significance")
rda_info
rda_info$permanova
pseq
rda_info$homogeneity
# Load packages for plotting function
library(miaViz)
install.packages("miaViz")
# Load packages for plotting function
library(miaViz)
# Generate RDA plot coloured by clinical status
plotRDA(pseq, "RDA", colour_by = "Time")
BiocManager::install("miaViz")
BiocManager::install("miaViz")
